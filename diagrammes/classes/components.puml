@startuml diagram name

!include diagram_config.puml

namespace components { 

    class InputComponent {
        + left : bool
        + right : bool
        + up : bool
        + down : bool
        + attack : bool
    }

    class EntityStateComponent {
        - timeRemainingInCurrentState : float
        - currentState : State
        + getState(): State
        + setState(state: State): void
        + getTimeRemainingInCurrentState(): float
        + setTimeRemainingInCurrentState(timeRemainingInCurrentState: float): void
    }
    EntityStateComponent ..> State: has a

    class State {
        + run(Vector2 direction, speedComponent:speedComponent, physicsComponent:physicsComponent): void
        + slowDown(speedComponent:speedComponent, physicsComponent:physicsComponent): void
        + idle(speedComponent:speedComponent, physicsComponent:physicsComponent): void
        + meleeAttack(attackComponent:attackComponent): void
        + rangedAttack(attackComponent:attackComponent): void
    }

    class StateIdle {
        + run(Vector2 direction, speedComponent:speedComponent, physicsComponent:physicsComponent): void
        + slowDown(speedComponent:speedComponent, physicsComponent:physicsComponent): void
        + idle(speedComponent:speedComponent, physicsComponent:physicsComponent): void
        + meleeAttack(attackComponent:attackComponent): void
        + rangedAttack(attackComponent:attackComponent): void
    }

    ' differents state heritant de State

    class PhysicsComponent {
        - body: Body
        + applyForce(force: Vector2): void
        + applyImpulse(impulse: Vector2): void
        + setLinearVelocity(velocity: Vector2): void
        + getLinearVelocity(): Vector2
        + setPosition(position: Vector2): void
        + getPosition(): Vector2
        + setRotation(rotation: float): void
        + getRotation(): float
    }

    class HealthComponent {
        -health : int
        -maxHealth : int
        -invincible : boolean
        +getHealth(): int
        +setHealth(int health): void
        +getMaxHealth(): int
        +setMaxHealth(int maxHealth): void
        +isInvincible(): boolean
        +setInvincible(boolean invincible): void
    }

    class SpeedComponent {
        - maxSpeed : float
        - decelerationDuration : float
        - timeRemainingTillStop : float
        - initialVelocityAtDeceleration : Vector2
        +getMaxSpeed(): float
        +setMaxSpeed(float maxSpeedInMetersPerSecond): void
        +getDecelerationTime(): float
        +setDecelerationTime(float decelerationDurationInSeconds): void
        +getTimeRemainingTillStop(): float
        +setTimeRemainingTillStop(timeRemainingTillStopInSeconds): void
    }

    class AttackComponent {
        - attackDamage : int
        - attackCooldown : float
        - lastAttackTime : float
        - weaponName : String
        - hitbox : Rectangle
        +getAttackDamage(): int
        +setAttackDamage(int attackDamage): void
        +getAttackCooldown(): float
        +setAttackCooldown(attackCooldownInSeconds:float): void
        +getLastAttackTime(): float
        +setLastAttackTime(lastAttackTimeInSeconds:float): void
        +getWeaponName(): String
        +setWeaponName(weaponName:String): void
        +getHitbox(): Rectangle
        +setHitbox(hitbox:Rectangle): void
    }

    class SpriteComponent {
        - show : boolean
        - textureRegion : TextureRegion
        - position : Vector3
        - rotation : float
        +getTextureRegion(): TextureRegion
        +setTextureRegion(textureRegion:TextureRegion): void
        +getPosition(): Vector3
        +setPosition(position:Vector3): void
    }

    class AnimationComponent {
        - animation : Animation<TextureRegion>
        - stateTime : float
        +getAnimation(): Animation<TextureRegion>
        +setAnimation(animation:Animation<TextureRegion>): void
        +getStateTime(): float
        +setStateTime(stateTime:float): void
    }

    class SpawnerComponent {
        - spawnInterval : float
        - lastSpawnTime : float
        - infiniteSpawns : boolean
        - counterSpawn : int
        - maxSpawn : int
        - factory : EntityFactory
        +getSpawnInterval(): float
        +setSpawnInterval(spawnIntervalInSeconds:float): void
        +getSpawnTime(): float
        +setSpawnTime(spawnTimeInSeconds:float): void
        +getSpawnPoint(): SpawnPoint
        +setSpawnPoint(spawnPoint:SpawnPoint): void
        +spawn(): void
    }

    class RoomComponent {
        - portes:List<Entity>
        - escaliers:List<Entity>
        - enemies:List<Entity>
        - items:List<Entity>
        - traps:List<Entity>
        - spawnPoint:Vector2
        + load():void
        + unload():void
        + pause():void
        + resume():void
        + getPortes():List<Entity>
        + getEscaliers():List<Entity>
        + getEnemies():List<Entity>
        + getItems():List<Entity>
        + getTraps():List<Entity>
        + getSpawnPoint():Vector2
        + setSpawnPoint(spawnPoint:Vector2):void
    }

    class PlayerCharacterComponent {}
    class MonsterComponent {
        
    }

    class TemporaryEffectComponent {
        - effect : Effect
        - timeRemaining : float
        + getTimeRemaining(): float
        + setTimeRemaining(timeRemainingInSeconds:float): void
        + getEffect(): Effect
    }
    TemporaryEffectComponent ..> Effect: has a

    class TemporaryLifetimeComponent {
        - timeRemaining : float
        + getTimeRemaining(): float
        + setTimeRemaining(timeRemainingInSeconds:float): void
    }
    
}


@enduml