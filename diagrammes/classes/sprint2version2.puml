@startuml
/'
******************
    Setups and includes
******************
'/
skinparam linetype ortho
skinparam Nodesep 100
' skinparam ranksep 100
skinparam groupInheritance 3

!global $artemisWorldClass = com.Artemis.World
!global $box2dWorldClass = com.badlogic.gdx.physics.box2d.World


namespace com.Artemis {

}

namespace com.badlogic {

}

!procedure $defineAsComponent($className)
    com.Artemis.Component <|-- $className
!endprocedure

!procedure $defineAsSystem($className, $systemType="EntitySystem")
    com.Artemis.$systemType <|-- $className
!endprocedure

!procedure $defineAsEntity($className)
    com.Artemis.Entity <|-- $className
!endprocedure

!procedure $defineAsArchetype($className)
    com.Artemis.Archetype <|-- $className
!endprocedure

!procedure $defineAsScreen($className)
    com.badlogic.gdx.Screen <|.. $className
!endprocedure

!procedure $addRelationship($class1Name, $class2Name, $leftMultiplicity=" ", $rightMultiplicity=" ", $sign="--", $relationship="", $direction=">")
    $class1Name "$leftMultiplicity"$sign"$rightMultiplicity" $class2Name : $relationship $direction
!endprocedure

!unquoted procedure $addRelationshipsToClass($className, $classes, $leftMultiplicity=" ", $rightMultiplicity=" ", $sign="--", $relationship="", $direction=">")
    !foreach $class in %splitstr($classes, ",")
        $addRelationship($className, $class, $leftMultiplicity, $rightMultiplicity, $sign, $relationship, $direction)
    !endfor
!endprocedure

/'
******************
    Components
******************
'/
namespace com.dungeonsdevs.components {
    $defineAsComponent(PhysicsComponent)
    $defineAsComponent(RenderingComponent)
    $defineAsComponent(AnimationComponent)
    $defineAsComponent(InputComponent)
    $defineAsComponent(EntityStateComponent)
    $defineAsComponent(MovementComponent)

    class PhysicsComponent {
        + body : Body
    }

    class RenderingComponent {
        + textureRegion : TextureRegion
    }

    class AnimationComponent {
        + animation : Animation<TextureRegion>
        + elapasedTime : float
    }

    class InputComponent {
        + left : bool
        + right : bool
        + up : bool
        + down : bool
    }
    
    enum EntityState {
        IDLE
        RUNNING
        SLOWING_DOWN
    }

    class EntityStateComponent {
        + timeRemainingInCurrentState : float
    }


    class MovementComponent {
        + maxSpeedInMeterPerSecond : float
        + decelerationTimeInSeconds : float
        + initialVelocityAtStartOfDeceleration : Vector2
    }

    $addRelationship(EntityStateComponent, EntityState, $rightMultiplicity="1", $sign="*--")
}

namespace com.dungeonsdevs.screens {
    class GameScreen {
        + GameScreen(game: DungeonGame)
        + render(delta: float)
        + resize(width: int, height: int)
        + dispose()
    }
    !$classes = $artemisWorldClass + "," + $box2dWorldClass
    $addRelationshipsToClass(GameScreen, $classes, $rightMultiplicity="1", $sign="*--", $relationship="has")
    $addRelationship(GameScreen, DungeonGame, $rightMultiplicity="1", $sign="*--", $relationship="has")

    $defineAsScreen(GameScreen)
}

/'
******************
    Systems
******************
'/
namespace com.dungeonsdevs.systems {
    class MovementSystem {
        - Logger logger
        - ComponentMapper<EntityStateComponent> stateMapper
        - ComponentMapper<PhysicsComponent> physicsMapper
        - ComponentMapper<MovementComponent> movementSpecsMapper
        - ComponentMapper<InputComponent> inputMapper
        # process(entity: Entity)
        - calculateMovementVector(input: InputComponent): Vector2
        - transitionAndRun(entity: Entity, movementVector: Vector2, movementComponent: MovementComponent, physicsComponent: PhysicsComponent): void
        ' private void transitionToSlowingDown(Entity e, MovementComponent movementComponent, PhysicsComponent physicsComponent)
        - transitionToSlowingDown(entity: Entity, movementComponent: MovementComponent, physicsComponent: PhysicsComponent): void
        - transitionToIdle(entity: Entity, physicsComponent: PhysicsComponent, movementComponent: MovementComponent): void
        - slowDown(entity: Entity, stateComponent: EntityStateComponent, movementComponent: MovementComponent, physicsComponent: PhysicsComponent): void
    }
    

    class StateManagementSystem {
        # process(entity: Entity)
        + transition(stateComponent: EntityStateComponent, state: EntityState): bool
    }

    class PhysicsSystem {
        - timeStep : float
        - VELOCITY_ITERATIONS : int
        - POSITION_ITERATIONS : int
        # processSystem()
    }

    class InputSystem {
        - ComponentMapper<InputComponent> inputMapper
        # process(entity: Entity)
    }

    class RenderingSystem {

    }

    $addRelationship(MovementSystem, StateManagementSystem, $sign="-->", $relationship="uses")
    $addRelationship(MovementSystem, InputComponent, $sign="-->", $relationship="checks")
    $addRelationshipsToClass(MovementSystem, "EntityStateComponent, PhysicsComponent", $rightMultiplicity="*", $sign="-->", $relationship="updates")
    $addRelationship(StateManagementSystem, EntityStateComponent, $sign="-->", $relationship="updates")
    $addRelationship(PhysicsSystem, $box2dWorldClass, $sign="-->", $rightMultiplicity="1", $relationship="updates", $direction=">")
    $addRelationship(InputSystem, InputComponent, $sign="-->", $relationship="updates")

    $defineAsSystem(MovementSystem, "EntityProcessingSystem")
    $defineAsSystem(StateManagementSystem, "EntityProcessingSystem")
    $defineAsSystem(PhysicsSystem, "IntervalEntitySystem")
    $defineAsSystem(InputSystem, "EntityProcessingSystem")
    $defineAsSystem(RenderingSystem)
    

    Note top of MovementSystem
    Le Systeme de mouvement n'agit que sur les entités d'Archetype PlayerCharacter
    End Note
}


'*****************

namespace utils {
    class GameAspects {
        + PLAYER_CHARACTER_ASPECT : Aspect.Builder
    }
    
    class GameArchetypes {
        + PLAYER_CHARACTER_ARCHETYPE : ArchetypeBuilder
    }

    class Constants {
        + PLAYER_CHAR_MAX_VELOCITY : float
        + PLAYER_CHAR_DECELERATION_TIME : float
    }

    Note as PlayerCharacterArchetypeNote
    L'archetype PlayerCharacter possède les composants suivant:
    - EntityStateComponent
    - PhysicsComponent
    - RenderingComponent
    - AnimationComponent
    - InputComponent
    - MovementComponent
    End Note
    PlayerCharacterArchetypeNote .. GameArchetypes::PLAYER_CHARACTER_ARCHETYPE
    PlayerCharacterArchetypeNote .. GameAspects::PLAYER_CHARACTER_ASPECT
}

'*****************


class DungeonGame extends com.badlogic.gdx.Game {
    + create()
    + render()
}

' hide components

@enduml