@startuml

class Game {
    initialize()
    update(delta : float) : void
    exit()
}

Game *-- ScreenManager : -screenManager

abstract class GameObject {
    - animation : Animation
}

abstract class GameCharacter {
    - health : int
    - speedMeterPerSecond : float
    - body : Body
    - contactDamages : int
    - meleeDamages : int
    + move(vecteur : Vector2): void
    + getPosition() : Vector2
    + attack()
    + takeDamage()
}
GameCharacter --|> GameObject


class Player {
    collectPowerUp()
}
Player --|> GameCharacter


class Monster {
    patrol()
}
Monster --|> GameCharacter

class PowerUp {
    activate()
    deactivate()
}
PowerUp --|> GameObject



class Level {
    - world : World
    - viewport : Viewport
    - player : Player
    - loadRoom(room : Room)
    - unloadRoom(room : Room)
    - loadPlayerCharacter() : void
    - createBoundary(x : float, y : float, width: float, height :float)
    + getCamera() : OrthographicCamera
    + getPlayer() : Player
    + update(delta : float) : void
    + getWorld() : World
    + getViewport() : Viewport
    + getPlayer() : Player
    + dispose() : void
}

Level "1"--"1..*" Room : has >
Level "1"--"1" Player : contains >

class Room {
    spawnMonster()
}

Room -- "0..*" PowerUp : may have >
Room -- "0..*" Monster : may have >


class ScreenManager {
    changeScreen()
    getCurrentScreen()
}

ScreenManager -- GameScreen : -currentScreen >

abstract GameScreen {}
GameScreen --|> Screen

WorldScreen *-- Level : -currentLevel

WorldScreen --|> GameScreen




@enduml